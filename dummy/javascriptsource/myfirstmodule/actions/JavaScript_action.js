// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import { Big } from "big.js";

// BEGIN EXTRA CODE
// END EXTRA CODE

/**
 * @returns {Promise.<void>}
 */
export async function JavaScript_action() {
	// BEGIN USER CODE
	let apiInstance = new AnySignApi();
	//var channel = "10010";//渠道号，由信手书提供，请咨询项目经理
	//初始化签名接口
	let dom = document.querySelector('.mx-name-lwg');
	//添加批签签名框
	function testAddCommentObj(objId) {
		var context_id = objId;
		var signer = new Signer("李明", "11011111111");

		/**
		 * 根据坐标定位签名方式
		 * @param left 签名图片最左边坐标值，相对于PDF当页最左下角(0,0)点，向上和向右分别为X轴、Y轴正方向
		 * @param top 签名图片顶边坐标值，相对于PDF当页最左下角(0,0)点，向上和向右分别为X轴、Y轴正方向
		 * @param right 签名图片最右边坐标值，相对于PDF当页最左下角(0,0)点，向上和向右分别为X轴、Y轴正方向
		 * @param bottom 签名图片底边坐标值，相对于PDF当页最左下角(0,0)点，向上和向右分别为X轴、Y轴正方向
		 * @param pageNo 签名在PDF中的页码，从1开始
		 * @param unit 坐标系单位，目前支持"dp"和"pt"
		 * @constructor
		 */
		var signerRule = new SignRule_XYZ(84.0, 523.0, 400.0, 477.0, 1, "dp");

		var commentConfig = new CommentConfig(signer, signerRule);
		commentConfig.commitment = "本人已阅";
		commentConfig.mass_word_height = 50;
		commentConfig.mass_word_width = 50;
		commentConfig.mass_words_in_single_line = 3;
		commentConfig.penColor = "#FF0000";
		commentConfig.comment_stroke_width = 8;//批注笔划粗细
		commentConfig.commentImgRatio = 3.0;//批注图片清晰度
		commentConfig.nessesary = false;
		commentConfig.isdistinguish = false;
		commentConfig.comment_max_times = 2;//手写识别最大次数，取值1-99，默认为3
		commentConfig.ocrCapture = ocrCapture;
		commentConfig.mass_dlg_type = CommentInputType.WhiteBoard;
		var res = apiInstance.addCommentObj(context_id, commentConfig);
		if (res) {
			alert("addCommentObj " + context_id + " success");
			return res;
		} else {
			alert("addCommentObj " + context_id + " error");
			return res;
		}
	}

	//添加单签签名框
	function testAddSignatureObj(objId) {
		var context_id = objId;
		var signer = new Signer("李明", "11011111111", "1");

		/**
		 *根据关键字定位签名位置
		 * @param keyWord 关键字字面值
		 * @param xOffset X轴偏移量，适配关键字和规则
		 * @param yOffset Y轴偏移量，适配关键字和规则
		 * @param pageNo 全文第几个关键字，0为全部关键字都签，负数为从后往前数
		 * @param KWIndex 与pageNo相同，为全文第几个关键字，0为全部关键字都签，负数为从后往前数
		 * @constructor
		 */
		//注：SignRule_KeyWord建议客户不要再使用，使用SignRule_KeyWordV2
		var signerRule = new SignRule_KeyWordV2("甲方签字", 130, 1, 1, 1);

		var signatureConfig = new SignatureConfig(signer, signerRule);
		//1:时间在上、2：时间在下、3：时间在右
		var timeTag = new TimeTag(1, "yyMMdd hh:mm:ss");
		signatureConfig.timeTag = timeTag;
		signatureConfig.singleWidth = 50;
		signatureConfig.singleHeight = 50;
		signatureConfig.title = "请投保人李明签字";
		signatureConfig.penColor = "#FF0000";
		signatureConfig.signature_stroke_width = 12;//签名笔划粗细
		signatureConfig.isTSS = true;//是否开始时间戳服务
		signatureConfig.signatureImgRatio = 1.0;//签名图片清晰度
		signatureConfig.nessesary = false;
		signatureConfig.isdistinguish = false;
		signatureConfig.signature_max_times = 2;//手写识别最大次数，取值1-99，默认为3
		signatureConfig.ocrCapture = ocrCapture;
		signatureConfig.isShowBgText = true;
		var res = apiInstance.addSignatureObj(context_id, signatureConfig);
		if (res) {
			alert("addSignatureObj " + context_id + " success");
			return res;
		} else {
			alert("addSignatureObj " + context_id + " error");
			return res;
		}
	}

	function setIdentifyCallBack(callback) {
		if (!apiInstance) {
			alert("信手书接口没有初始化");
			return;
		}
		apiInstance.setIdentifyCallBack(callback);
	}

	var res;

	//识别回调接口
	var identify_callback = function (errCode) {
		if (errCode == SUCCESS) {
			return;
		}
		if (errCode == DATA_CANNOT_PARSED) {
			alert("输入数据项无法解析！");
		} else if (errCode == SERVICE_SYSTEM_EXCEPTION) {
			alert("服务系统异常错误！");
		} else if (errCode == RECOGNITION_RESULT_EMPTY) {
			alert("识别结果为空！");
		} else if (errCode == CONNECTION_SERVICE_TIMEOUT) {
			alert("连接识别服务超时！");
		} else if (errCode == CONNECTION_RECOGNITION_EXCEPTION) {
			alert("连接识别服务异常！");
		} else if (errCode == RECOGNITION_FALSE) {
			alert("书写错误！");
		} else {
			alert(errCode);
		}
	}

	var callback = function (context_id, context_type, val) {
		document.getElementById("other").style.display = "block";
		if (context_type == CALLBACK_TYPE_SIGNATURE) {
			//签名回显
			document.getElementById("xss_20").src = "data:image/png;base64," + val;
			var aImg = document.getElementById("xss_20");
			for (var i = 0; i < aImg.length; i++) {
				aImg[i].style.height = "1500";
				aImg[i].style.width = "1500";
			}
		} else if (context_type == CALLBACK_TYPE_COMMENTSIGN) {
			//签名回显
			document.getElementById("xss_21").src = "data:image/png;base64," + val;
			var aImg = document.getElementById("xss_21");
			for (var i = 0; i < aImg.length; i++) {
				aImg[i].style.height = "250";
				aImg[i].style.width = "250";
			}
		}
		setAlertTitle();
		alert("收到浏览器回调：" + "context_id：" + context_id + " context_type：" + context_type + " value：" + val);
	};//测试回调，将回调数据显示

	////////////////////////////////////////////////

	//设置签名算法，默认为RSA，可以设置成SM2
	EncAlgType.EncAlg = "RSA";

	apiInstance = new AnySignApi();
	var channel = "10010";//渠道号，由信手书提供，请咨询项目经理
	//初始化签名接口
	res = apiInstance.initAnySignApi(callback, channel);

	if (!res) {
		alert("init error");
	} else {

	}
	////////////////////////////////////////////////

	//开启识别
	let ocrCapture = new OCRCapture();
	ocrCapture.text = "a";
	ocrCapture.IPAdress = "http://223.70.139.221:11204/HWRV2/RecvServlet";
	ocrCapture.appID = "123";
	ocrCapture.count = 5;
	ocrCapture.language = Language.CHS;
	ocrCapture.resolution = 80;
	ocrCapture.serviceID = "999999";

	setIdentifyCallBack(identify_callback);

	///////////////////////////////////////////////

	//注册单字签字对象20
	res = testAddSignatureObj(20);
	if (!res) {
		alert("testAddSignatureObj error");
		return;
	} else {

	}

	res = testAddSignatureObj(21);
	if (!res) {
		alert("testAddSignatureObj error");
		return;
	} else {

	}

	res = testAddCommentObj(30);
	if (!res) {
		alert("testAddCommentObj error");
		return;
	} else {

	}

	////////////////////////////////////////////////

	//注册一个单位签章

	var signer = new Signer("小明", "110xxxxxx");
	/**
	 * 使用服务器规则配置签名
	 * @param tid 服务器端生成的配置规则
	 * @constructor
	 */
	/*var signerRule = new SignRule_Tid("111");
	var cachet_config = new CachetConfig(signer, signerRule, false);

	res = apiInstance.addCachetObj(cachet_config);

	if(!res){
	   alert("addCachetObj error");
	}else{

	}*/

	//将配置提交
	res = apiInstance.commitConfig();

	if (res) {
		alert("Init ALL 提交配置成功");
	} else {
		alert("Init ALL 提交配置失败");
	}

	debugger
	// END USER CODE
}
